@use 'variables' as *;
@use 'sass:color';
@use 'sass:map';
@use 'sass:list';

$colorMap: (
  'primary': (
    'text': map.get($color-palette, 'common', 'white'),
    'base': map.get($color-palette, 'primary', 'default'),
    'light': map.get($color-palette, 'primary', 'variant-2'),
    'dark': map.get($color-palette, 'primary', 'variant-3'),
  ),
  'secondary': (
    'text': map.get($color-palette, 'common', 'white'),
    'base': map.get($color-palette, 'secondary', 'default'),
    'light': map.get($color-palette, 'secondary', 'variant-2'),
    'dark': map.get($color-palette, 'secondary', 'variant-3')
  )
);

.app-button {
  display: inline-block;
  padding: map.get($spacing, sm);
  border-radius: map.get($border-radius, 'default');
  text-transform: capitalize;
  transition: background 250ms ease-in-out;
  line-height: 1;
  cursor: pointer;
  text-align: center;
  vertical-align: middle;
  text-decoration: none;
  color: inherit;

  &:hover {
    background: map.get($color-palette, 'gray', 'default');
  }
}

.app-button.app-button-variant-contained {
  @each $key, $value in $colorMap {
    &.app-button-color-#{$key} {
      background: map.get($value, 'base');
      color: map.get($value, 'text');

      &:hover {
        background: map.get($value, 'light');
      }
    }
  }
}

//.btnColor {
//  @each $key, $variant in $color-palette {
//    @each $variant-key, $variant-color in $variant {
//      $class-name: #{$key}-#{$variant-key};
//
//      &-#{$class-name} {
//        &.btnVariant-basic {
//          border-radius: 0;
//          @include variantBasic($variant-color);
//        }
//
//        &.btnVariant-contained {
//          $text-color: map.get($color-palette, white, default);
//
//          // Here when you will create your preferred UI, just add the needed classes :)
//          // The thing is that you want to use a dark text color on light background or vice-versa
//          $dark-backgrounds: 'primary-default', 'secondary-default';
//
//          @if (list.index($dark-backgrounds, $class-name)) {
//            $text-color: map.get($color-palette, 'common', 'white');
//          }
//
//          @include variantContained($variant-color, $text-color);
//        }
//
//        &.btnVariant-outlined {
//          @include variantOutlined($variant-color);
//        }
//      }
//    }
//  }
//}

//.btnVariant {
//  &-outlined {
//    &:disabled,
//    &[aria-disabled='true'] {
//      @include disabledButton(
//        map.get($color-palette, secondary, default),
//        map.get($color-palette, gray, default)
//      );
//    }
//  }
//
//  &-contained {
//    &:disabled,
//    &[aria-disabled='true'] {
//      @include disabledButton(
//        map.get($color-palette, gray, default),
//        map.get($color-palette, gray, variant-2)
//      );
//    }
//  }
//}

//.btnWithIcon {
//  &-leftIcon,
//  &-rightIcon {
//    display: inline-flex;
//    align-items: center;
//    justify-content: center;
//    gap: map.get($spacing, sm);
//  }
//
//  &-leftIcon {
//    padding-left: 12px;
//  }
//
//  &-rightIcon {
//    padding-right: 12px;
//  }
//}

//.btnIconButton {
//  border-radius: map.get($border-radius, rounded);
//  display: inline-flex;
//  flex-direction: column;
//  justify-content: center;
//  align-items: center;
//  padding: 0;
//}

//.btnIconSize {
//  &-small {
//    width: map.get($buttons-icon-size, sm);
//    height: map.get($buttons-icon-size, sm);
//    font-size: 0.8rem;
//  }
//
//  &-default {
//    width: map.get($buttons-icon-size, default);
//    height: map.get($buttons-icon-size, default);
//    font-size: 1rem;
//  }
//
//  &-medium {
//    width: map.get($buttons-icon-size, md);
//    height: map.get($buttons-icon-size, md);
//    font-size: 1.25rem;
//  }
//
//  &-large {
//    width: map.get($buttons-icon-size, lg);
//    height: map.get($buttons-icon-size, lg);
//    font-size: 1.5rem;
//  }
//}
